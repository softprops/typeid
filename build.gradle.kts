/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
     id("com.github.mrsarm.jshell.plugin") version "1.2.1"
     id("com.adarshr.test-logger") version "3.2.0"
     `maven-publish`
     signing
     id("io.github.gradle-nexus.publish-plugin").version("1.0.0")
     id("me.champeau.jmh") version "0.7.1"
}

// https://central.sonatype.org/publish/publish-guide/#introduction

group = "me.lessis"
version = "0.0.2"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

tasks.jar {
    manifest {
        attributes(mapOf("Implementation-Title" to project.name,
                "Implementation-Version" to project.version))
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        create<MavenPublication>("mavenJava") {
            artifactId = "typeid"
            from(components["java"])
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name.set("typeid")
                description.set("A TypeID implementation for Java")
                url.set("https://github.com/softprops/typeid-java")
                licenses {
                    license {
                        name.set("MIT")
                        url.set("https://opensource.org/licenses/MIT")
                    }
                }
                developers {
                    developer {
                        id.set("softprops")
                        name.set("Doug Tangren")
                        email.set("d.tangren@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:git@github.com:softprops/typeid-java.git")
                    developerConnection.set("scm:git:git@github.com:softprops/typeid-java.git")
                    url.set("https://github.com/softprops/typeid-java/")
                }
            }
        }
    }
}

signing {
    val signingKey: String? by project
    val signingPassword: String? by project
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign(publishing.publications["mavenJava"])
}

// https://oss.sonatype.org
nexusPublishing {
    repositories {
        sonatype {
            username.set(System.getenv("OSSRH_USER") ?: return@sonatype)
            password.set(System.getenv("OSSRH_PASSWORD") ?: return@sonatype)
        }
    }
}

tasks.withType<Test> {
    this.testLogging {
        this.showStandardStreams = true
    }
}

dependencies {
    testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.0")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use JUnit Jupiter test framework
            useJUnitJupiter("5.9.3")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

jmh {
    warmupIterations.set(3)
    iterations.set(2)
    threads.set(1)
    fork.set(1)
}